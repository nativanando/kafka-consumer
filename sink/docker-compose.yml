---
version: '2.2'
services:
  zookeeper1:
    image: confluentinc/cp-zookeeper:latest
    container_name: lasse-zookeeper-1
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: zookeeper1:22888:23888;zookeeper2:32888:33888;zookeeper3:42888:43888

  zookeeper2:
    image: confluentinc/cp-zookeeper:latest
    container_name: lasse-zookeeper-2
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: zookeeper1:22888:23888;zookeeper2:32888:33888;zookeeper3:42888:43888

  zookeeper3:
    image: confluentinc/cp-zookeeper:latest
    container_name: lasse-zookeeper-3
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: zookeeper1:22888:23888;zookeeper2:32888:33888;zookeeper3:42888:43888

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: lasse-kafka-node-1
    cpu_count: 2
    cpu_percent: 100
    cpus: 2
    mem_limit: 4G
    restart: on-failure
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_DELETE_TOPIC_ENABLE: "true"   
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: lasse-kafka-node-2
    cpu_count: 2
    cpu_percent: 100
    cpus: 2
    mem_limit: 4G
    restart: on-failure
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      
  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: lasse-kafka-node-3
    cpu_count: 2
    cpu_percent: 100
    cpus: 2
    mem_limit: 4G
    restart: on-failure
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3

  registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: lasse-schema-registry
    restart: on-failure
    ports:
      - 8081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      SCHEMA_REGISTRY_HOST_NAME: registry
      SCHEMA_REGISTRY_LISTENERS: http://registry:8081
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
      - kafka1
      - kafka2
      - kafka3
  registry-ui:
    image: landoop/schema-registry-ui:0.9.4
    container_name: lasse-registry-ui
    restart: on-failure
    ports:
      - "8001:8000"
    environment:
      SCHEMAREGISTRY_URL: http://registry:8081/
      PROXY: "true"
    depends_on:
      - registry
  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:latest
    restart: on-failure
    container_name: lasse-kafka-rest-proxy
    ports:
      - "8082:8082"
    environment:
      # KAFKA_REST_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_REST_LISTENERS: http://kafka-rest-proxy:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:29092,PLAINTEXT://kafka2:29093,PLAINTEXT://kafka3:29094
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
      - kafka1
      - kafka2
      - kafka3
      - registry
  kafka-topics-ui:
    image: landoop/kafka-topics-ui:latest
    container_name: lasse-kafka-topics-ui
    restart: on-failure
    ports:
      - "8000:8000"
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "7"
    environment:
      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
      PROXY: "true"
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
      - kafka1
      - kafka2
      - kafka3
      - registry
      - kafka-rest-proxy
  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: lasse-kafka-connect
    restart: on-failure
    cpu_count: 2
    cpu_percent: 100
    cpus: 2
    mem_limit: 4G
    ports:
      - 8083:8083
    environment:
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      CONNECT_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29093,kafka3:29094
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: docker-connect
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_LOG4J_ROOT_LOGLEVEL: DEBUG
      CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars'
    volumes:
      - ./jars:/etc/kafka-connect/jars
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "7"
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
      - kafka1
      - kafka2
      - kafka3
      - registry
      - kafka-rest-proxy
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:latest
    container_name: lasse-kafka-connect-ui
    restart: on-failure
    ports:
      - "8003:8000"
    environment:
      CONNECT_URL: "http://kafka-connect:8083/"
      PROXY: "true"
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "7"
    depends_on:
      - kafka-connect
  cassandra:
    image: cassandra:latest
    container_name: lasse-cassandra-db
    restart: on-failure
    cpu_count: 3
    cpu_percent: 100
    cpus: 2
    mem_limit: 8G
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
      - kafka1
      - kafka2
      - kafka3
      - registry
      - kafka-connect
    ports:
      - '7000:7000'
      - '9042:9042'
      - '9160:9160' 
    environment: 
      CASSANDRA_BROADCAST_ADDRESS: cassandra
      CASSANDRA_SEEDS: cassandra
      CASSANDRA_CLUSTER_NAME: cassandra_cluster
  cassandra-load-data:
    container_name: lasse-cassandra-load-data
    image: cassandra:latest
    restart: on-failure
    environment: 
      CASSANDRA_BROADCAST_ADDRESS: cassandra-load-data
      CASSANDRA_SEEDS: cassandra
      CASSANDRA_CLUSTER_NAME: cassandra_cluster
    depends_on:
      - cassandra
    volumes:
      - ./schema_cassandra.cql:/schema.cql
    command: /bin/bash -c "echo Trying to connect on Cluster... && cqlsh cassandra -f /schema.cql && echo CONNECTION ESTABLISHED! && echo KEYSPACE and TABLES created."